AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Fullbay API Data Ingestion Lambda Function'

Parameters:
  Environment:
    Type: String
    Default: 'development'
    AllowedValues: ['development', 'staging', 'production']
    Description: 'Deployment environment'
  
  ScheduleExpression:
    Type: String
    Default: 'rate(1 day)'
    Description: 'Schedule expression for Lambda trigger (e.g., rate(1 day), cron(0 9 * * ? *))'
  
  DBHost:
    Type: String
    Description: 'RDS database host endpoint'
  
  DBName:
    Type: String
    Default: 'fullbay_data'
    Description: 'Database name'
  
  DBUser:
    Type: String
    Default: 'fullbay_user'
    Description: 'Database username'
  
  SecretsManagerSecretName:
    Type: String
    Description: 'Name of the Secrets Manager secret containing API keys and DB password'
  
  VpcSubnetIds:
    Type: CommaDelimitedList
    Description: 'List of VPC subnet IDs for Lambda function (required for RDS access)'
  
  VpcSecurityGroupIds:
    Type: CommaDelimitedList
    Description: 'List of VPC security group IDs for Lambda function'

Globals:
  Function:
    Timeout: 300
    MemorySize: 512
    Runtime: python3.11
    Architectures:
      - x86_64
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment
        DB_HOST: !Ref DBHost
        DB_NAME: !Ref DBName
        DB_USER: !Ref DBUser
        SECRETS_MANAGER_SECRET_NAME: !Ref SecretsManagerSecretName
        SCHEDULE_EXPRESSION: !Ref ScheduleExpression

Resources:
  # IAM Role for Lambda Function
  FullbayIngestionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'fullbay-ingestion-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${SecretsManagerSecretName}*'
        - PolicyName: CloudWatchMetrics
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                Resource: '*'

  # Lambda Function
  FullbayIngestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'fullbay-api-ingestion-${Environment}'
      CodeUri: src/
      Handler: lambda_function.lambda_handler
      Description: 'Ingest data from Fullbay API and store in RDS'
      Role: !GetAtt FullbayIngestionRole.Arn
      VpcConfig:
        SubnetIds: !Ref VpcSubnetIds
        SecurityGroupIds: !Ref VpcSecurityGroupIds
      Events:
        ScheduledTrigger:
          Type: Schedule
          Properties:
            Schedule: !Ref ScheduleExpression
            Description: 'Trigger Fullbay API ingestion'
            Enabled: true
      Tags:
        Environment: !Ref Environment
        Project: 'fullbay-api-ingestion'

  # CloudWatch Log Group
  FullbayIngestionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/fullbay-api-ingestion-${Environment}'
      RetentionInDays: 30

  # CloudWatch Alarms
  FullbayIngestionErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'fullbay-ingestion-errors-${Environment}'
      AlarmDescription: 'Alert when Fullbay ingestion Lambda has errors'
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FullbayIngestionFunction
      TreatMissingData: notBreaching

  FullbayIngestionDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub 'fullbay-ingestion-duration-${Environment}'
      AlarmDescription: 'Alert when Fullbay ingestion Lambda runs too long'
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 240000  # 4 minutes (in milliseconds)
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref FullbayIngestionFunction
      TreatMissingData: notBreaching

Outputs:
  FullbayIngestionFunction:
    Description: 'Lambda Function ARN'
    Value: !GetAtt FullbayIngestionFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-function-arn'
  
  FullbayIngestionRole:
    Description: 'IAM Role ARN'
    Value: !GetAtt FullbayIngestionRole.Arn
    Export:
      Name: !Sub '${AWS::StackName}-role-arn'
  
  LogGroup:
    Description: 'CloudWatch Log Group'
    Value: !Ref FullbayIngestionLogGroup
    Export:
      Name: !Sub '${AWS::StackName}-log-group'