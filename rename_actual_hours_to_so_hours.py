#!/usr/bin/env python3
"""
Rename the actual_hours column to so_hours in the fullbay_line_items table
"""

import psycopg2
from psycopg2.extras import RealDictCursor

def rename_actual_hours_to_so_hours():
    """Rename the actual_hours column to so_hours."""
    print("üîÑ RENAMING ACTUAL_HOURS TO SO_HOURS")
    print("=" * 50)
    
    db_params = {
        'host': 'fullbay-postgres-db.cc74yq2i4j8n.us-east-1.rds.amazonaws.com',
        'port': 5432,
        'dbname': 'fullbay_data',
        'user': 'postgres',
        'password': '5255Tillman'
    }
    
    try:
        conn = psycopg2.connect(**db_params)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        print("üìä CURRENT TABLE STATUS:")
        print("-" * 40)
        
        # Check if the column exists
        cursor.execute("""
            SELECT column_name, data_type, ordinal_position
            FROM information_schema.columns 
            WHERE table_name = 'fullbay_line_items' 
            AND table_schema = 'public'
            AND column_name = 'actual_hours'
        """)
        
        column_info = cursor.fetchone()
        
        if not column_info:
            print("   ‚ùå Column 'actual_hours' does not exist")
            print("   ‚úÖ No action needed")
            return
        
        print(f"   üìã Column found: {column_info['column_name']}")
        print(f"   üìä Data type: {column_info['data_type']}")
        print(f"   üìç Position: {column_info['ordinal_position']}")
        
        # Check if so_hours already exists
        cursor.execute("""
            SELECT column_name
            FROM information_schema.columns 
            WHERE table_name = 'fullbay_line_items' 
            AND table_schema = 'public'
            AND column_name = 'so_hours'
        """)
        
        if cursor.fetchone():
            print("   ‚ùå Column 'so_hours' already exists")
            print("   ‚úÖ Cannot rename - target name already exists")
            return
        
        print()
        print("üîÑ RENAME OPERATION:")
        print("-" * 40)
        print("   1. Rename actual_hours to so_hours")
        print("   2. Verify column has been renamed")
        print("   3. Confirm column count remains the same")
        print()
        
        # Execute the column rename
        print("üöÄ Renaming column...")
        cursor.execute("ALTER TABLE fullbay_line_items RENAME COLUMN actual_hours TO so_hours")
        print("   ‚úÖ Column renamed successfully")
        
        # Verify the column was renamed
        cursor.execute("""
            SELECT column_name
            FROM information_schema.columns 
            WHERE table_name = 'fullbay_line_items' 
            AND table_schema = 'public'
            AND column_name = 'actual_hours'
        """)
        
        if cursor.fetchone():
            print("   ‚ùå Column 'actual_hours' still exists - rename failed")
        else:
            print("   ‚úÖ Column 'actual_hours' successfully removed")
        
        cursor.execute("""
            SELECT column_name
            FROM information_schema.columns 
            WHERE table_name = 'fullbay_line_items' 
            AND table_schema = 'public'
            AND column_name = 'so_hours'
        """)
        
        if cursor.fetchone():
            print("   ‚úÖ Column 'so_hours' successfully created")
        else:
            print("   ‚ùå Column 'so_hours' not found - rename failed")
        
        # Get column count to ensure it's the same
        cursor.execute("""
            SELECT COUNT(*) as count
            FROM information_schema.columns 
            WHERE table_name = 'fullbay_line_items' 
            AND table_schema = 'public'
        """)
        
        column_count = cursor.fetchone()['count']
        print(f"   üìä Total columns: {column_count}")
        
        # Commit the changes
        conn.commit()
        print("   üíæ Changes committed to database")
        
        print()
        print("üéâ COLUMN RENAME COMPLETE!")
        print("=" * 50)
        print("   ‚úÖ actual_hours ‚Üí so_hours")
        print("   ‚úÖ Table structure updated")
        print("   ‚úÖ Ready for code updates")
        
        conn.close()
        
    except Exception as e:
        print(f"‚ùå Error: {e}")
        if 'conn' in locals():
            conn.rollback()
        raise

if __name__ == "__main__":
    rename_actual_hours_to_so_hours()
