#!/usr/bin/env python3
"""
Environment Variable Loader for Fullbay API Ingestion
Loads credentials from local_config.env and sets them persistently
"""

import os
import sys
from pathlib import Path

def load_env_file(env_file_path):
    """Load environment variables from a .env file."""
    if not os.path.exists(env_file_path):
        print(f"‚ùå Environment file not found: {env_file_path}")
        return False
    
    loaded_vars = {}
    
    try:
        with open(env_file_path, 'r') as f:
            for line_num, line in enumerate(f, 1):
                line = line.strip()
                
                # Skip empty lines and comments
                if not line or line.startswith('#'):
                    continue
                
                # Parse KEY=VALUE format
                if '=' in line:
                    key, value = line.split('=', 1)
                    key = key.strip()
                    value = value.strip()
                    
                    # Remove quotes if present
                    if value.startswith('"') and value.endswith('"'):
                        value = value[1:-1]
                    elif value.startswith("'") and value.endswith("'"):
                        value = value[1:-1]
                    
                    # Don't overwrite if placeholder value
                    if not value.endswith('_here'):
                        os.environ[key] = value
                        loaded_vars[key] = value
                    else:
                        print(f"‚ö†Ô∏è  Skipping placeholder value for {key}")
                else:
                    print(f"‚ö†Ô∏è  Invalid format on line {line_num}: {line}")
        
        if loaded_vars:
            print(f"‚úÖ Loaded {len(loaded_vars)} environment variables:")
            for key, value in loaded_vars.items():
                if 'PASSWORD' in key or 'KEY' in key:
                    print(f"   {key}: [HIDDEN]")
                else:
                    print(f"   {key}: {value}")
            return True
        else:
            print("‚ö†Ô∏è  No valid environment variables found (all appear to be placeholders)")
            return False
            
    except Exception as e:
        print(f"‚ùå Error loading environment file: {e}")
        return False

def create_powershell_env_script():
    """Create a PowerShell script to set environment variables persistently."""
    script_content = '''# PowerShell script to set environment variables persistently
# Generated by load_env.py

$envFile = "local_config.env"

if (-Not (Test-Path $envFile)) {
    Write-Host "‚ùå Environment file not found: $envFile" -ForegroundColor Red
    exit 1
}

Write-Host "üîß Loading environment variables from $envFile..." -ForegroundColor Green

Get-Content $envFile | ForEach-Object {
    $line = $_.Trim()
    
    # Skip empty lines and comments
    if ($line -eq "" -or $line.StartsWith("#")) {
        return
    }
    
    # Parse KEY=VALUE format
    if ($line.Contains("=")) {
        $parts = $line.Split("=", 2)
        $key = $parts[0].Trim()
        $value = $parts[1].Trim()
        
        # Remove quotes if present
        if ($value.StartsWith('"') -and $value.EndsWith('"')) {
            $value = $value.Substring(1, $value.Length - 2)
        } elseif ($value.StartsWith("'") -and $value.EndsWith("'")) {
            $value = $value.Substring(1, $value.Length - 2)
        }
        
        # Don't set placeholder values
        if (-Not $value.EndsWith("_here")) {
            # Set for current session
            Set-Item -Path "env:$key" -Value $value
            
            # Set persistently for user
            [Environment]::SetEnvironmentVariable($key, $value, "User")
            
            if ($key.Contains("PASSWORD") -or $key.Contains("KEY")) {
                Write-Host "   $key`: [HIDDEN]" -ForegroundColor White
            } else {
                Write-Host "   $key`: $value" -ForegroundColor White
            }
        } else {
            Write-Host "‚ö†Ô∏è  Skipping placeholder value for $key" -ForegroundColor Yellow
        }
    }
}

Write-Host "‚úÖ Environment variables loaded successfully!" -ForegroundColor Green
Write-Host "üí° These variables are now set for your current session and future sessions." -ForegroundColor Cyan
'''
    
    with open('set_env_vars.ps1', 'w') as f:
        f.write(script_content)
    
    print("üìù Created PowerShell script: set_env_vars.ps1")
    print("   Run with: .\\set_env_vars.ps1")

def main():
    """Main function."""
    print("üîß FULLBAY ENVIRONMENT VARIABLE LOADER")
    print("=" * 40)
    
    env_file = "local_config.env"
    
    # Check if config file exists
    if not os.path.exists(env_file):
        print(f"‚ùå Configuration file not found: {env_file}")
        print("\nüìã Next steps:")
        print("1. Edit local_config.env with your actual database credentials")
        print("2. Replace all 'your_*_here' placeholders with real values")
        print("3. Run this script again")
        return False
    
    # Load environment variables
    success = load_env_file(env_file)
    
    if success:
        # Create PowerShell script for persistent loading
        create_powershell_env_script()
        
        print("\nüéâ Environment variables loaded successfully!")
        print("\nüìã Next steps:")
        print("1. For persistent loading, run: .\\set_env_vars.ps1")
        print("2. Test database connection: python check_database_state.py")
        
        return True
    else:
        print("\n‚ùå Failed to load environment variables")
        print("\nüìã Please check your local_config.env file:")
        print("1. Make sure all placeholder values are replaced with real credentials")
        print("2. Ensure the format is KEY=VALUE (no spaces around =)")
        print("3. Remove any quotes unless they're part of the actual value")
        
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
